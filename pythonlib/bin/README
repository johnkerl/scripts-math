================================================================
This is a grab bag of various scripts, mostly numerical.
John Kerl
kerl.john.r@gmail.com
2012-07-28
================================================================

Descriptions:

pgr, a plotter which sends tabular file data to pylab:
* documentation [doc/pgr.html],
* main script [pgr],
* required I/O module [tabutil_m.py].

Matrix arithmetic (using the matrix module sackmat_m.py):
* Matrix multiply [pymatmul],
* matrix add [pymatadd],
* matrix subtract [pymatsub],
* matrix inverse [pymatinv],
* matrix power [pymatpow],
* determinant [pydet],
* trace [pytrace],
* real matrix exponential [pymatexp],
* complex matrix exponential [pycmatexp],
* real matrix square root [pymxsqrt] (Denman-Beavers),
* complex matrix square root [pymxcsqrt],
* real matrix A^* A [pymxata],
* complex matrix A^* A [pycmxata],
* row reduction [pymatrr],
* row echelon form [pymatrech],
* row rank [pymatrank],
* kernel basis [pykerbas],
* kernel basis [pykerbas],
* Gram-Schmidt orthonormalization [pygramsch],
* Jacobi eigensolver for real symmetric matrices [pyrseigsys],
* tester for the Jacobi eigensolver [test_rseigsys],
* Householder-matrix generator [pyhhq],
* another Householder-matrix generator [pyhhqv],
* another Householder-matrix generator [pyrefl],
* rotation-matrix generator [pyrot],
* QR decomposition [pyqrdec],
* real polar decomposition [pypoldec],
* complex polar decomposition [pycpoldec].

Simple MCMC (Metropolis-Hastings) sampling for the 2D Ising model [rcm/doc/code/ising2d.py].

Misc. matrix generators:
* oneeye [oneeye],
* tridiag [tridiag],
* discrete Laplacian with Dirichlet boundary conditions [disclap],
* discrete Laplacian with periodic boundary conditions [disclapp].

Numerical calculus:
* 1-D numerical differentiation [numderiv3],
* 1-D numerical integration [numint1],
* contour integrals [numintc1],
* another contour integral [numintc2],
* streamlined complex integration [numintc3].

Taylor polynomials [taypol].

Lagrange interpolation module [lagrinterp_m.py], program [lagrinterp].

Real and complex I/O [pyrcio_m.py].

Fourier processing:
* Fourier-series approximation [four1],
* Fast Fourier Transform module [pyfft_m.py] and program [pyfft].
* Uses pyrcio_m.py [pyrcio_m.py].

Probability:
* some Markov chain hackwork [prb_m.py],
* 1D and 2D Brownian motion and Brownian bridge [brownian.py],
* beta-distribution PDF [betapdf_m.py],
* beta-distribution PDF plotter [plotbetapdf.py].
The latter uses Tom Loredo's special functions [sp_funcs_m.py].

Gaussian normal routines normalpdf, normalcdf, invnorm, erf, erfc, and inverf:
* normal_m.py [normal_m.py].

Real/complex abstraction layer for conj(), real(), imag(), phz():
* cplxreal_m.py [cplxreal_m.py].

Random-scalar-complex generator:
* module [randc_m.py],
* tester [test_randc.py].

Real random-matrix generator (m xn, GL(n), SL(n), O(n), SO(n), symmetric, skew-symmetric):
* program randmat [randmat],
* module randmat_m.py [randmat_m.py].

Complex random-matrix generator (m x n IID mean-square-1, GUE, IID mean-square-1 XX^t):
* program randmatc [randmatc],
* module randmatc_m.py [randmatc_m.py].

Statistics:
* module [stats_m.py],
* 1D histogram [pyhisto],
* 2D histogram [pyhisto2],
* mean [pymean],
* standard deviation [pystddev],
* pair covariance [pycov],
* pair correlation [pycorr],
* covariance matrix [pycovx],
* correlation matrix [pycorrx],
* univariate linear regression [pylinreg],
* noisy-line generator [noisyline],
* noisy-sine generator [noisysine],
* stratified random sampling [stratvar].

Sliding-window data smoother:
* program [pysmooth],
* module [smoother_m.py].

A utility module: kerlutil.py [kerlutil.py].

float to hex: float2hex_m.py [float2hex_m.py].

How to do a sprintf in Python: sprintf.html [sprintf.html].

Routines for printing images, cycle decompositions, and orders of moves on the Rubik's cube:
* module [rube_m.py],
* demo [rube_demo.py],
* demo output [rube_demo.txt].
